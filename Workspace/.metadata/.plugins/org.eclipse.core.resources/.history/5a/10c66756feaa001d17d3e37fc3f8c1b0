package br.com.tokiomarine.service;
import java.time.LocalDate;
import java.time.Period;
import java.util.List;

import org.hibernate.service.spi.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.tokiomarine.entity.Agendamento;
import br.com.tokiomarine.entity.Operacao;
import br.com.tokiomarine.entity.RegraOperacao;
import br.com.tokiomarine.repository.AgendamentoRepository;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AgendamentoService {

		private final AgendamentoRepository agendamentoRepository;
		
		@Autowired
		private RegraOperacaoService regraOperacaoService;
		
		@Autowired
		private OperacaoService operacaoService;
		
		public AgendamentoService(AgendamentoRepository agendamentoRepository) {
			this.agendamentoRepository = agendamentoRepository;
		}

		@Transactional
		public Agendamento Salvar(Agendamento agendamento) {
			try {
				log.info("Calculando a Taxa do Agendamento");
				agendamento.setTaxaAplicada(calcularTaxa(agendamento));
				if(agendamento.getTaxaAplicada() > 0) {
					agendamento = agendamentoRepository.save(agendamento);
					log.info("ID: "+agendamento.getId()+" Taxa Aplicada: "+agendamento.getTaxaAplicada());
				} else {
					log.info("Taxa não calculada !");
				}
			} catch(Exception e) {
				throw new RuntimeException(e);
			}
			return agendamento;
		}

		public List<Agendamento> listar() {
			log.info("Listando Agendamentos");	
			return agendamentoRepository.findAll();
		}
		
		public Double calcularTaxa(Agendamento agendamento) {
			Integer prazo = retornarPrazo(agendamento);
			Double  valorTransferencia = agendamento.getValorTransferencia();
			return extrairTaxa(agendamento.getOperacao(),prazo, valorTransferencia);
		}
		
		public Double extrairTaxa(Operacao operacao, int prazo, Double valorTransferencia) {
			List<RegraOperacao> regrasOperacoes = regraOperacaoService.findByOperacao(operacao);
			Double taxa = 0d;
			
			switch( operacao.getNome() ) {
				case "A" :
				case "B" :
					if((prazo >= regrasOperacoes.get(0).getPrazoInicial()) && (prazo <= regrasOperacoes.get(0).getPrazoFinal())) {
						taxa = retornarAjusteTaxa(valorTransferencia, operacao.getNome(), regrasOperacoes.get(0).getTaxa(), regrasOperacoes.get(0).getJuros());
					}
					break;
				case "C" :
					for(RegraOperacao item : regrasOperacoes) {
						if((prazo >= item.getPrazoInicial()) && (item.getPrazoFinal() > 0 ? prazo <= item.getPrazoFinal() : true)) {
							taxa = item.getJuros();
						}
					}
					break;
				case "D" :
					for(RegraOperacao item : regrasOperacoes) {
						if((valorTransferencia >= item.getValorInicial()) && (item.getValorFinal() > 0 ? valorTransferencia <= item.getValorFinal() : true)) {
							taxa = extrairTaxa(item.getOperacaoSecundaria(), prazo, valorTransferencia);
						}
					}
					break;
				}
			return taxa;
		}
		
		public Double retornarAjusteTaxa(Double valorTransferencia, String nomeOperacao, Double taxa, Double juros) {
			Double taxaFinal = 0d;
			if(nomeOperacao.equals("A")) {
				if(taxa > 0) {
					Double valorTaxa = valorTransferencia*((juros/100)+1);
					Double valorFinal = valorTaxa + taxa;
					taxaFinal = (((valorFinal/valorTransferencia)-1)*100);					
				}
 			} else {
				taxaFinal = taxa;
			}
			return taxaFinal;
		}
		
		public static int retornarPrazo(Agendamento agendamento) {
			if(agendamento.getDataAgendamento() == null || agendamento.getDataTransferencia() == null) {
				return 0;
			}
			LocalDate dataInicial = retornarLocaleData(agendamento.getDataAgendamento());
			LocalDate dataFinal   = retornarLocaleData(agendamento.getDataTransferencia());

	        Period period = Period.between(dataInicial, dataFinal);
	        return (int) (period.toTotalMonths() * 30 + period.getDays());
		}
		
		public static LocalDate retornarLocaleData(String data) {
			int ano = 0;
			int mes = 0;
			int dia = 0;
			try {
				ano  = Integer.valueOf(data.substring(6, 10));
				mes = Integer.valueOf(data.substring(3,5));
				dia   = Integer.valueOf(data.substring(0,2));
			} catch (Exception e) {
				String mensagem = "Erro-na-Conversão-da-Data ==> Utilize-o-Formato-dd/mm/yyy";
				throw new ServiceException(mensagem, e);
			}
			return LocalDate.of(ano, mes, dia);
		}
}
