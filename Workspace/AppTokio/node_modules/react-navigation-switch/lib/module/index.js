/**
 * Most of codes are copied from https://github.com/react-navigation/react-navigation
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { View, StyleSheet, useWindowDimensions, Text, Platform, } from "react-native";
import { TabRouter, NavigationHelpersContext, useNavigationBuilder, createNavigatorFactory, NavigationRouteContext, NavigationContext, useTheme, } from "@react-navigation/native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
export var getDefaultHeaderHeight = function (layout, statusBarHeight) {
    var isLandscape = layout.width > layout.height;
    var headerHeight;
    if (Platform.OS === "ios") {
        if (isLandscape && !Platform.isPad) {
            headerHeight = 32;
        }
        else {
            headerHeight = 44;
        }
    }
    else if (Platform.OS === "android") {
        headerHeight = 56;
    }
    else {
        headerHeight = 64;
    }
    return headerHeight + statusBarHeight;
};
function Header(props) {
    var scene = props.scene, layout = props.layout;
    var route = scene.route, descriptor = scene.descriptor;
    var name = route.name;
    var insets = useSafeAreaInsets();
    var colors = useTheme().colors;
    var _a = descriptor.options, title = _a.title, headerTitle = _a.headerTitle, _b = _a.headerTitleAlign, headerTitleAlign = _b === void 0 ? Platform.select({
        ios: "center",
        default: "left",
    }) : _b, headerLeft = _a.headerLeft, headerLeftAccessibilityLabel = _a.headerLeftAccessibilityLabel, headerRight = _a.headerRight, headerTitleAllowFontScaling = _a.headerTitleAllowFontScaling, headerTitleStyle = _a.headerTitleStyle, headerTintColor = _a.headerTintColor, headerPressColorAndroid = _a.headerPressColorAndroid, headerStyle = _a.headerStyle, _c = _a.headerStatusBarHeight, headerStatusBarHeight = _c === void 0 ? insets.top : _c;
    var currentTitle = typeof headerTitle !== "function" && headerTitle !== undefined
        ? headerTitle
        : title !== undefined
            ? title
            : scene.route.name;
    var defaultHeight = getDefaultHeaderHeight(layout, headerStatusBarHeight);
    var leftButton = headerLeft
        ? headerLeft({ tintColor: headerTintColor })
        : null;
    var rightButton = headerRight
        ? headerRight({ tintColor: headerTintColor })
        : null;
    return (<View pointerEvents="box-none" style={[
            {
                height: defaultHeight,
                backgroundColor: colors.card,
                borderBottomColor: colors.border,
                shadowColor: colors.border,
            },
            styles.container,
            headerStyle,
        ]}>
      <View pointerEvents="none" style={{ height: headerStatusBarHeight }}/>

      <View pointerEvents="box-none" style={styles.content}>
        {leftButton ? (<View pointerEvents="box-none" style={[styles.left, { left: insets.left }]}>
            {leftButton}
          </View>) : null}
        <View pointerEvents="box-none" style={[
            headerTitleAlign === "left"
                ? {
                    position: "absolute",
                    left: (leftButton ? 72 : 16) + insets.left,
                    right: (rightButton ? 72 : 16) + insets.right,
                }
                : {
                    marginHorizontal: (leftButton ? 32 : 16) +
                        Math.max(insets.left, insets.right),
                },
        ]}>
          {typeof headerTitle === "function" ? (headerTitle({
            children: currentTitle,
            allowFontScaling: headerTitleAllowFontScaling,
            tintColor: headerTintColor,
            style: headerTitleStyle,
        })) : (<Text accessibilityRole="header" aria-level="1" numberOfLines={1} allowFontScaling={headerTitleAllowFontScaling} style={[
                styles.title,
                { color: headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.text },
                styles.title,
                headerTitleStyle,
            ]}>
              {currentTitle}
            </Text>)}
        </View>
        {rightButton ? (<View pointerEvents="box-none" style={[styles.right, { right: insets.right }]}>
            {rightButton}
          </View>) : null}
      </View>
    </View>);
}
function SwitchNavigator(props) {
    var children = props.children, screenOptions = props.screenOptions, initialRouteName = props.initialRouteName;
    var _a = useNavigationBuilder(TabRouter, {
        children: children,
        screenOptions: screenOptions,
        initialRouteName: initialRouteName,
    }), state = _a.state, navigation = _a.navigation, descriptors = _a.descriptors;
    var dimensions = useWindowDimensions();
    return (<NavigationHelpersContext.Provider value={navigation}>
      <View style={[{ flex: 1 }]}>
        {state.routes.map(function (route, i) {
            var descriptor = descriptors[route.key];
            var _a = descriptor.options, _b = _a.header, header = _b === void 0 ? function (props) { return <Header {...props}/>; } : _b, _c = _a.headerShown, headerShown = _c === void 0 ? false : _c;
            return (<View key={route.key} style={[
                    StyleSheet.absoluteFill,
                    { display: i === state.index ? "flex" : "none" },
                ]}>
              {headerShown ? (<NavigationContext.Provider value={descriptor.navigation}>
                  <NavigationRouteContext.Provider value={route}>
                    {header({
                        layout: dimensions,
                        scene: { route: route, descriptor: descriptor },
                    })}
                  </NavigationRouteContext.Provider>
                </NavigationContext.Provider>) : null}

              {descriptor.render()}
            </View>);
        })}
      </View>
    </NavigationHelpersContext.Provider>);
}
var styles = StyleSheet.create({
    container: __assign(__assign({}, Platform.select({
        android: {
            elevation: 4,
        },
        ios: {
            shadowOpacity: 0.85,
            shadowRadius: 0,
            shadowOffset: {
                width: 0,
                height: StyleSheet.hairlineWidth,
            },
        },
        default: {
            borderBottomWidth: StyleSheet.hairlineWidth,
        },
    })), { zIndex: 1 }),
    content: {
        flex: 1,
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "center",
    },
    title: Platform.select({
        ios: {
            fontSize: 17,
            fontWeight: "600",
        },
        android: {
            fontSize: 20,
            fontFamily: "sans-serif-medium",
            fontWeight: "normal",
        },
        default: {
            fontSize: 18,
            fontWeight: "500",
        },
    }),
    icon: {
        height: 24,
        width: 24,
        margin: 3,
        resizeMode: "contain",
    },
    touchable: {
        marginHorizontal: 11,
    },
    left: {
        position: "absolute",
        left: 0,
        top: 0,
        bottom: 0,
        justifyContent: "center",
        alignItems: "flex-start",
    },
    right: {
        position: "absolute",
        right: 0,
        top: 0,
        bottom: 0,
        justifyContent: "center",
        alignItems: "flex-end",
    },
});
export var createSwitchNavigator = createNavigatorFactory(SwitchNavigator);
//# sourceMappingURL=index.js.map